services:
  
  broker:
    image: apache/kafka:3.7.2
    container_name: broker
    ports:
      - 9092:9092
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      # see https://rmoff.net/2018/08/02/kafka-listeners-explained/
      KAFKA_LISTENERS: INSIDE://broker:29092,OUTSIDE://broker:9092,CONTROLLER://localhost:9093
      KAFKA_ADVERTISED_LISTENERS: INSIDE://broker:29092,OUTSIDE://localhost:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 1

  schema-registry:
    image: confluentinc/cp-schema-registry:7.9.0
    container_name: schema-registry
    ports:
      - 8081:8081
    depends_on:
      - broker
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: broker:29092

  connect:
    image: confluentinc/cp-kafka-connect-base:7.7.2
    container_name: kafka-connect
    depends_on:
      - broker
      - schema-registry
    ports:
      - 8083:8083
    environment:
      CONNECT_BOOTSTRAP_SERVERS: broker:29092
      CONNECT_REST_PORT: 8083
      CONNECT_LISTENERS: "http://:8083"
      CONNECT_REST_ADVERTISED_PORT: 8083
      CONNECT_GROUP_ID: kafka-connect
      CONNECT_CONFIG_STORAGE_TOPIC: _connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: _connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: _connect-status
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_LOG4J_APPENDER_STDOUT_LAYOUT_CONVERSIONPATTERN: "[%d] %p %X{connector.context}%m (%c:%L)%n"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components,/data/connect-jars
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER-minioadmin}
      AWS_SECRET_KEY: ${MINIO_ROOT_PASSWORD-minio123}
      AWS_ACCESS_KEY: ${MINIO_ROOT_USER-minioadmin}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD-minio123}

    volumes:
      - ./connect-jars:/data/connect-jars
      - ./connect-properties:/data/connect-properties

  minio:
    image: minio/minio:RELEASE.2025-02-18T16-25-55Z
    container_name: minio
    ports:
      - 9000:9000
      - 9001:9001
    environment:
    # uses environment variable for username/pw; if doesn't exist will default to other value
      MINIO_ROOT_USER: ${MINIO_ROOT_USER-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD-minio123}
    command: "server --address :9000 --console-address :9001 /data" 
    entrypoint: >
      /bin/sh -c '
        isAlive() { curl -sf http://127.0.0.1:9000/minio/health/live; }    # check if Minio is alive
        minio $0 "$@" --quiet & echo $! > /tmp/minio.pid                   # start Minio in the background
        while ! isAlive; do sleep 0.1; done                                # wait until Minio is alive
        mc alias set minio http://127.0.0.1:9000 ${MINIO_ROOT_USER-minioadmin} ${MINIO_ROOT_PASSWORD-minio123} # setup Minio client
        mc mb minio/wikichanges || true                                    # create a test bucket
        mc anonymous set public minio/wikichanges                          # make the test bucket public
        kill -s INT $(cat /tmp/minio.pid) && rm /tmp/minio.pid             # stop Minio
        while isAlive; do sleep 0.1; done                                  # wait until Minio is stopped
        exec minio $0 "$@"                                                 # start Minio in the foreground
      '